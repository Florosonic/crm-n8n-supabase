{
  "name": "CRM INPUT",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "labelIds": [
            "UNREAD"
          ],
          "sender": "-requestled@gmail.com"
        },
        "options": {}
      },
      "id": "cb5236d7-59b2-43ea-842b-5471d0f47b3b",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -880,
        64
      ],
      "executeOnce": true,
      "credentials": {
        "gmailOAuth2": {
          "id": "LzfcUmqtW5UjGJZf",
          "name": "LED Search Bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const gmailData = $input.first().json;\n\nlet cleanSubject = gmailData.subject || '';\ncleanSubject = cleanSubject.replace(/^(FW:|RE:|Fwd:|Fw:|Re:)\\s*/gi, '').trim();\n\nlet emailText = (gmailData.text || gmailData.snippet || '').toLowerCase();\n\n// –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ won/lost\nlet isCloseCommand = false;\nlet closeCommand = null;\nlet closeReason = '';\n\nif (emailText.match(/^\\s*won\\s*:?\\s*/i) || emailText.includes('\\nwon') || emailText.startsWith('won')) {\n  isCloseCommand = true;\n  closeCommand = 'won';\n  const wonMatch = emailText.match(/won[:\\s]+(.+?)(?:\\n|$)/i);\n  closeReason = wonMatch ? wonMatch[1].trim() : '–°–¥–µ–ª–∫–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞';\n} else if (emailText.match(/^\\s*lost\\s*:?\\s*/i) || emailText.includes('\\nlost') || emailText.startsWith('lost')) {\n  isCloseCommand = true;\n  closeCommand = 'lost';\n  const lostMatch = emailText.match(/lost[:\\s]+(.+?)(?:\\n|$)/i);\n  closeReason = lostMatch ? lostMatch[1].trim() : '–°–¥–µ–ª–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–Ω–∞';\n}\n\n// –ü–∞—Ä—Å–∏–Ω–≥ —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞—á–∞–ª–∞ –ø–∏—Å—å–º–∞\nconst originalText = gmailData.text || gmailData.snippet || '';\nconst beforeSignature = originalText.split(/From:|–° —É–≤–∞–∂–µ–Ω–∏–µ–º/i)[0];\n\nlet directCompany = null;\nlet directPhone = null;\nlet directFirstName = null;\nlet directLastName = null;\nlet directStage = null;\nlet directPingDate = null;\nlet directDescription = null;\n\n// –ö–æ–º–ø–∞–Ω–∏—è - –ª–æ–≤–∏–º –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É \"–ö–æ–º–ø–∞–Ω–∏—è\" –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º\nconst companyMatch = beforeSignature.match(/–ö–æ–º–ø–∞–Ω–∏—è[^–∞-—è–ê-–Øa-zA-Z0-9]*(.+?)(?:\\n|$)/i);\nif (companyMatch) {\n  directCompany = companyMatch[1].trim();\n}\n\n// –¢–µ–ª–µ—Ñ–æ–Ω\nconst phoneMatch = beforeSignature.match(/–¢–µ–ª–µ—Ñ–æ–Ω[^0-9+]*(.+?)(?:\\n|$)/i);\nif (phoneMatch) {\n  directPhone = phoneMatch[1].trim();\n}\n\n// –§–ò–û\nconst fioMatch = beforeSignature.match(/–§–ò–û[^–∞-—è–ê-–Øa-zA-Z]*(.+?)(?:\\n|$)/i);\nif (fioMatch) {\n  const fio = fioMatch[1].trim().split(/\\s+/);\n  directFirstName = fio[0] || null;\n  directLastName = fio[1] || null;\n}\n\n// –≠—Ç–∞–ø\nconst stageMatch = beforeSignature.match(/–≠—Ç–∞–ø[^0-9]*(\\d)/i);\nif (stageMatch) {\n  directStage = parseInt(stageMatch[1]);\n}\n\n// –ü–∏–Ω–≥\nconst pingMatch = beforeSignature.match(/–ü–∏–Ω–≥[^0-9]*(\\d{2})\\.(\\d{2})\\.(\\d{4})/i);\nif (pingMatch) {\n  directPingDate = `${pingMatch[3]}-${pingMatch[2]}-${pingMatch[1]}`;\n}\n\n// –û–ø–∏—Å–∞–Ω–∏–µ\nconst descMatch = beforeSignature.match(/–û–ø–∏—Å–∞–Ω–∏–µ[^–∞-—è–ê-–Øa-zA-Z]*(.+?)(?:\\n|$)/i);\nif (descMatch) {\n  directDescription = descMatch[1].trim();\n}\n\nreturn [{\n  json: {\n    text: gmailData.text || gmailData.snippet || '',\n    subject: cleanSubject,\n    originalSubject: gmailData.subject || '',\n    from: gmailData.from?.value?.[0]?.address || gmailData.from || '',\n    fromName: gmailData.from?.value?.[0]?.name || '',\n    id: gmailData.id,\n    threadId: gmailData.threadId,\n    date: gmailData.date,\n    isCloseCommand: isCloseCommand,\n    closeCommand: closeCommand,\n    closeReason: closeReason,\n    directCompany: directCompany,\n    directPhone: directPhone,\n    directFirstName: directFirstName,\n    directLastName: directLastName,\n    directStage: directStage,\n    directPingDate: directPingDate,\n    directDescription: directDescription\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        64
      ],
      "id": "7eec816a-957c-432b-851e-9ab9141bebf4",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT d.id as deal_id, d.product_name, d.stage, d.status, c.name as company_name FROM deals d JOIN companies c ON c.id = d.company_id WHERE LOWER(d.product_name) = LOWER('{{ $json.subject }}') AND d.status = 'open' ORDER BY d.created_at DESC LIMIT 1",
        "options": {}
      },
      "id": "9d917d1c-4912-4222-b671-068c93b73ef3",
      "name": "Find Deal for Close",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        -16
      ],
      "credentials": {
        "postgres": {
          "id": "JnDPpQ68oUq3yEkE",
          "name": "CRM"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dealData = $('Find Deal for Close').first().json;\n\nif (!dealData || !dealData.deal_id) {\n  throw new Error('–û—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º \"' + $('Code').item.json.subject + '\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');\n}\n\nreturn [{\n  json: dealData\n}];"
      },
      "id": "7033f483-64c2-4ada-b9fb-b13ad0da8b7a",
      "name": "Check Deal Found",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        -16
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM close_deal('{{ $json.deal_id }}'::UUID, '{{ $('Code').item.json.closeCommand }}', '{{ $('Code').item.json.closeReason }}')",
        "options": {}
      },
      "id": "2e0c9e9a-45c8-4f0f-a0bc-05177a2e5183",
      "name": "Close Deal in DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -32,
        -16
      ],
      "credentials": {
        "postgres": {
          "id": "JnDPpQ68oUq3yEkE",
          "name": "CRM"
        }
      }
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $('Code').item.json.id }}",
        "message": "=<html>\n<body style=\"font-family: Arial, sans-serif; font-size: 12px; line-height: 1.4; color: #333;\">\n\n<div style=\"margin-bottom: 10px;\">\n  <div style=\"font-weight: bold; font-size: 12px; margin-bottom: 4px;\">‚úÖ –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏</div>\n  <div style=\"padding-left: 20px; font-size: 11px;\">\n    <div style=\"color: {{ $('Code').item.json.closeCommand === 'won' ? '#28a745' : '#dc3545' }}; font-weight: bold;\">\n      {{ $('Code').item.json.closeCommand === 'won' ? 'üéâ –í–´–ò–ì–†–ê–ù–ê' : '‚ùå –ü–†–û–ò–ì–†–ê–ù–ê' }}\n    </div>\n    <div><strong>–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:</strong> {{ $now.toFormat('dd.MM.yyyy HH:mm') }}</div>\n  </div>\n</div>\n\n<div style=\"margin-bottom: 10px;\">\n  <div style=\"font-weight: bold; font-size: 12px; margin-bottom: 4px;\">üë§ –ö–æ–º–ø–∞–Ω–∏—è</div>\n  <div style=\"padding-left: 20px; font-size: 11px;\">\n    <div><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {{ $('Find Deal for Close').item.json.company_name }}</div>\n  </div>\n</div>\n\n<div style=\"margin-bottom: 10px;\">\n  <div style=\"font-weight: bold; font-size: 12px; margin-bottom: 4px;\">üìã –°–¥–µ–ª–∫–∞</div>\n  <div style=\"padding-left: 20px; font-size: 11px;\">\n    <div><strong>–ü—Ä–æ–¥—É–∫—Ç:</strong> {{ $('Find Deal for Close').item.json.product_name }}</div>\n    <div><strong>–≠—Ç–∞–ø:</strong> {{ $('Find Deal for Close').item.json.stage }}</div>\n  </div>\n</div>\n\n<div style=\"font-size: 10px; color: #999; margin-top: 12px; padding-top: 8px; border-top: 1px solid #eee;\">\n  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π CRM\n</div>\n\n</body>\n</html>",
        "options": {
          "replyToSenderOnly": true
        }
      },
      "id": "e1faa5f6-93b5-4b4c-a18f-1babec11ac2f",
      "name": "Send Close Success",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        144,
        -16
      ],
      "webhookId": "ba9082d5-0cd9-46d8-af8c-8fb7e8e0f470",
      "credentials": {
        "gmailOAuth2": {
          "id": "LzfcUmqtW5UjGJZf",
          "name": "LED Search Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT d.id as deal_id, d.product_name, d.product_description, d.price, c.name as company_name, ct.email, ct.phone, ct.first_name, ct.last_name\nFROM deals d\nLEFT JOIN companies c ON c.id = d.company_id\nLEFT JOIN contacts ct ON ct.id = d.contact_id\nWHERE LOWER(d.product_name) = LOWER('{{ $json.subject }}')\nLIMIT 1\n",
        "options": {}
      },
      "id": "444c168e-c05c-4794-bdc7-e3864092e046",
      "name": "Check Existing Deal",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        144
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "JnDPpQ68oUq3yEkE",
          "name": "CRM"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö, –ø—Ä–æ–¥—É–∫—Ç–µ –∏ —ç—Ç–∞–ø–µ —Å–¥–µ–ª–∫–∏.\n=== –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï ===\n–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞: {{ $('Code').item.json.text }}\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {{ $now.format('yyyy-MM-dd') }}\n=== –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û ===\n–ò–∑–≤–ª–µ–∫–∞–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ö–õ–ò–ï–ù–¢–ï (—Å –∫–µ–º –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ï–≤–≥–µ–Ω–∏–π –ë–æ–ª–æ—Ç—è–Ω).\n–ò–ì–ù–û–†–ò–†–£–ô –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –°–∏–º–º–µ—Ç—Ä–æ–Ω/Symmetron –∏ –ï–≤–≥–µ–Ω–∏–∏ –ë–æ–ª–æ—Ç—è–Ω–µ.\n–ò–ì–ù–û–†–ò–†–£–ô —Ç–µ–ª–µ—Ñ–æ–Ω—ã +78124494707 (–º. 6075); –ø—Ä—è–º–æ–π: +78124260271\n=== –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –°–õ–£–ñ–ï–ë–ù–´–ï –ü–û–ú–ï–¢–ö–ò ===\n–í –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï –ø–∏—Å—å–º–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ \"From:\" –∏–ª–∏ \"–° —É–≤–∞–∂–µ–Ω–∏–µ–º\") –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–º–µ—Ç–∫–∏:\n\n\"–≠—Ç–∞–ø X\" - –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞\n\"–ö–æ–º–ø–∞–Ω–∏—è [–Ω–∞–∑–≤–∞–Ω–∏–µ]\" - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞\n\"[—Ç–µ–ª–µ—Ñ–æ–Ω]\" - —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞\n\n–≠—Ç–∏ –ø–æ–º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ë–æ–ª–æ—Ç—è–Ω–æ–º –û –ö–õ–ò–ï–ù–¢–ï - –∏–∑–≤–ª–µ–∫–∞–π –∏—Ö.\n–ü—Ä–∏–º–µ—Ä:\n+7 (993) 205-13-94\n–≠—Ç–∞–ø 6\n–ö–æ–º–ø–∞–Ω–∏—è –í–∏—Ç—Ä—É–ª—é–∫—Å\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ë–æ–ª–æ—Ç—è–Ω –ï–≤–≥–µ–Ω–∏–π...\n‚Üí phone: \"+7 (993) 205-13-94\", stage: 6, company_name: \"–í–∏—Ç—Ä—É–ª—é–∫—Å\"\n=== –ß–¢–û –ò–ó–í–õ–ï–ö–ê–¢–¨ ===\n–ö–æ–º–ø–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n–ò—â–∏ –≤ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–º–µ—Ç–∫–∞—Ö –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n–ü—Ä–∏–º–µ—Ä—ã: \"–ö–æ–º–ø–∞–Ω–∏—è –ü—Ä–æ–º–¥–∏–æ–¥\" ‚Üí \"–ü—Ä–æ–º–¥–∏–æ–¥\"\n\n–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: –∏—â–∏ –≤ –ø–æ–¥–ø–∏—Å—è—Ö –ø–∏—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞\nEmail: –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–ù–ï symmetron.ru)\n–¢–µ–ª–µ—Ñ–æ–Ω—ã:\n\n–ò–∑ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–º–µ—Ç–æ–∫ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ \"From:\" –∏–ª–∏ \"–° —É–≤–∞–∂–µ–Ω–∏–µ–º\")\n–ò–∑ –ø–æ–¥–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞ (–ù–ï –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –ë–æ–ª–æ—Ç—è–Ω–∞)\n–í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π\n–°–æ—Ö—Ä–∞–Ω—è–π –¥–æ–±–∞–≤–æ—á–Ω—ã–µ: \"8(4722)52-17-20 –¥–æ–±.140\"\n\n–ü—Ä–æ–¥—É–∫—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –±–µ—Ä–µ—Ç—Å—è –∏–∑ Subject –ø–∏—Å—å–º–∞\n\n–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏ (1-7):\n\n–ò–∑ —Å–ª—É–∂–µ–±–Ω–æ–π –ø–æ–º–µ—Ç–∫–∏ \"–≠—Ç–∞–ø X\"\n–ò–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n\nStage ‚Ññ1 –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –ü—Ä–∏–º–µ—Ä—ã:\n\"–ß—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ? –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏? –ú–æ–∂–µ—Ç –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏? –ü–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∑–∞—è–≤–∫–∏? –ö–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏?\"\nStage ‚Ññ2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞/–ö–ü. –ü—Ä–∏–º–µ—Ä—ã:\n\"–ö–ü –Ω–∏–∂–µ. –°—á–µ—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏. –û—Ç–≤–µ—Ç –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≥–æ—Ç–æ–≤. –°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\"\nStage ‚Ññ3 –ü–æ—Å—Ç–∞–≤–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤. –ü—Ä–∏–º–µ—Ä—ã:\n\"–û–±—Ä–∞–∑—Ü—ã –æ—Ç–≥—Ä—É–∑–∏–º —Ç–æ–≥–¥–∞-—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–≤—Ç—Ä–∞, –∏–ª–∏ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é). –û–±—Ä–∞–∑—Ü—ã –æ—Ç–≥—Ä—É–∑–∏–ª–∏. –û–±—Ä–∞–∑—Ü—ã —É—à–ª–∏. –û–±—Ä–∞–∑—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ. –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑—Ü—ã —Ç–æ–≥–¥–∞-—Ç–æ.\"\nStage ‚Ññ4 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n\"–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ—à–ª–∏ –¥–æ –í–∞—Å –æ–±—Ä–∞–∑—Ü—ã? –î–æ—à–ª–∏ –ª–∏ –æ–±—Ä–∞–∑—Ü—ã? –ü–æ–ª—É—á–∏–ª–∏ –æ–±—Ä–∞–∑—Ü—ã?\"\nStage ‚Ññ5 –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n\"–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–≥–¥–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –æ–±—Ä–∞–∑—Ü—ã? –ö–æ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã? –û–±—Ä–∞–∑—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –≤—Å–µ —É—Å—Ç—Ä–æ–∏–ª–æ.\"\nStage ‚Ññ6 –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä—ã:\n\"–û–±—Ä–∞–∑—Ü—ã —É—Å—Ç—Ä–æ–∏–ª–∏, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏? –û–±—Ä–∞–∑—Ü—ã –ø–æ–¥–æ—à–ª–∏, –∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –ø–æ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–∞–º?\"\nStage ‚Ññ7 –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã. –ü—Ä–∏–º–µ—Ä—ã:\n\"–ü—Ä–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —É –í–∞—Å –Ω–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏? –ú–æ–∂–µ—Ç –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏? –ï—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã?\"\n\n\n–î–∞—Ç—ã:\n\n**–§–û–†–ú–ê–¢ –î–ê–¢: DD.MM.YYYY (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)**\n–ü—Ä–∏–º–µ—Ä—ã: \"07.11.2025\" = 7 –Ω–æ—è–±—Ä—è 2025, \"31.12.2024\" = 31 –¥–µ–∫–∞–±—Ä—è 2024\nsample_shipment_date: –¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\nmanual_ping_date: –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ \"–ü–∏–Ω–≥ –Ω–∞ 31.10\" ‚Üí \"2025-10-31\"\n\nNotes: –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –≤—Å–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–°–¢–†–û–ì–û 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n\n=== –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê ===\n–í–µ—Ä–Ω–∏ JSON –ë–ï–ó markdown –±–ª–æ–∫–æ–≤ (–±–µ–∑ ```json):\n{\n\"company_name\": \"–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ null\",\n\"email\": \"email –∫–ª–∏–µ–Ω—Ç–∞\",\n\"phone\": \"—Ç–µ–ª–µ—Ñ–æ–Ω—ã —á–µ—Ä–µ–∑ ; –∏–ª–∏ null\",\n\"first_name\": \"–∏–º—è –∏–ª–∏ null\",\n\"last_name\": \"—Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ null\",\n\"stage\": —á–∏—Å–ª–æ 1-7,\n\"sample_shipment_date\": \"YYYY-MM-DD –∏–ª–∏ null\",\nmanual_ping_date: –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ \"–ü–∏–Ω–≥ –Ω–∞ 31.10\" ‚Üí \"2025-10-31\"\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–∞—Ç—ã –í–°–ï–ì–î–ê –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–ï–ù–¨.–ú–ï–°–Ø–¶ (–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π)!\n\"07.11.2025\" –æ–∑–Ω–∞—á–∞–µ—Ç 7 –ù–û–Ø–ë–†–Ø (–º–µ—Å—è—Ü 11), –∞ –ù–ï 11 –æ–∫—Ç—è–±—Ä—è!\n\"notes\": \"—Å–∞–º–º–∞—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏\"\n}",
        "options": {}
      },
      "id": "ad22ae50-a04a-4926-b7aa-6d0b483fafa7",
      "name": "Parse Email with AI",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -208,
        144
      ]
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.1
        }
      },
      "id": "6c1c79b7-eab8-4610-af8b-9bfa642e8268",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -208,
        320
      ],
      "credentials": {
        "openAiApi": {
          "id": "kfJHIULROpUDP7Q0",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aiOutput = $input.first().json.output;\nconst gmailData = $('Gmail Trigger').first().json;\nconst codeData = $('Code').first().json;\n\nlet existingDealData = null;\ntry {\n  existingDealData = $('Check Existing Deal').first().json;\n} catch (e) {}\n\nlet parsedData;\ntry {\n  parsedData = JSON.parse(aiOutput);\n} catch (e) {\n  const jsonMatch = aiOutput.match(/{[\\s\\S]*}/);\n  if (jsonMatch) {\n    parsedData = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI');\n  }\n}\n\nlet productName = gmailData.subject || gmailData.Subject || '';\nproductName = productName.replace(/^(FW:|RE:|Fwd:|Fw:|Re:)\\s*/gi, '').trim();\nif (!productName) {\n  productName = '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω';\n}\n\nif (existingDealData && existingDealData.deal_id) {\n  parsedData.company_name = parsedData.company_name || existingDealData.company_name;\n  parsedData.email = parsedData.email || existingDealData.email;\n  parsedData.phone = parsedData.phone || existingDealData.phone;\n  parsedData.first_name = parsedData.first_name || existingDealData.first_name;\n  parsedData.last_name = parsedData.last_name || existingDealData.last_name;\n  parsedData.product_name = existingDealData.product_name || productName;\n  parsedData.product_description = parsedData.product_description || existingDealData.product_description;\n  parsedData.price = parsedData.price || existingDealData.price;\n  parsedData.existing_deal = true;\n  parsedData.existing_deal_id = existingDealData.deal_id;\n} else {\n  parsedData.product_name = productName;\n  parsedData.existing_deal = false;\n}\n\n// –ù–û–í–û–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä—è–º—ã–º –¥–∞–Ω–Ω—ã–º –∏–∑ –ø–∏—Å—å–º–∞ –Ω–∞–¥ AI\nif (codeData.directCompany) {\n  parsedData.company_name = codeData.directCompany;\n}\nif (codeData.directPhone) {\n  parsedData.phone = codeData.directPhone;\n}\nif (codeData.directFirstName) {\n  parsedData.first_name = codeData.directFirstName;\n}\nif (codeData.directLastName) {\n  parsedData.last_name = codeData.directLastName;\n}\nif (codeData.directStage) {\n  parsedData.stage = codeData.directStage;\n}\nif (codeData.directPingDate) {\n  parsedData.manual_ping_date = codeData.directPingDate;\n}\nif (codeData.directDescription) {\n  parsedData.notes = codeData.directDescription;\n}\n\nif (!parsedData.company_name || !parsedData.product_name || !parsedData.stage) {\n  throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ AI');\n}\n\nlet senderEmail = null;\nif (gmailData.from) {\n  if (typeof gmailData.from === 'string') {\n    const emailMatch = gmailData.from.match(/<(.+?)>/) || gmailData.from.match(/([^\\s]+@[^\\s]+)/);\n    senderEmail = emailMatch ? emailMatch[1] : gmailData.from;\n  } else if (gmailData.from.value && Array.isArray(gmailData.from.value)) {\n    senderEmail = gmailData.from.value[0]?.address;\n  } else if (gmailData.from.address) {\n    senderEmail = gmailData.from.address;\n  }\n}\n\nif (!senderEmail && gmailData.sender) {\n  senderEmail = gmailData.sender;\n}\n\nlet subject = gmailData.subject || gmailData.Subject || '';\n\nreturn [{\n  json: {\n    output: {\n      company_name: parsedData.company_name,\n      contact_email: parsedData.email,\n      contact_phone: parsedData.phone,\n      contact_first_name: parsedData.first_name,\n      contact_last_name: parsedData.last_name,\n      email: parsedData.email,\n      phone: parsedData.phone,\n      first_name: parsedData.first_name,\n      last_name: parsedData.last_name,\n      product_name: parsedData.product_name,\n      product_description: parsedData.product_description,\n      price: parsedData.price,\n      stage: parsedData.stage,\n      sample_shipment_date: parsedData.sample_shipment_date,\n      manual_ping_date: parsedData.manual_ping_date,\n      notes: parsedData.notes,\n      confidence: parsedData.confidence,\n      existing_deal: parsedData.existing_deal,\n      existing_deal_id: parsedData.existing_deal_id\n    },\n    emailId: gmailData.id || gmailData.messageId,\n    threadId: gmailData.threadId || gmailData.conversationId,\n    senderEmail: senderEmail || 'Evgeniy.Bolotian@symmetron.ru',\n    subject: subject,\n    gmailDebug: {\n      hasFrom: !!gmailData.from,\n      fromType: typeof gmailData.from,\n      fromValue: gmailData.from\n    }\n  }\n}];"
      },
      "id": "71e70f94-08ec-4314-9828-d759805f2deb",
      "name": "Parse JSON from AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        144
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM process_email($1::jsonb)",
        "options": {
          "queryReplacement": "={{ JSON.stringify($json.output) }}"
        }
      },
      "id": "a9a5a2b2-153a-479d-bace-4d0f30ba33e5",
      "name": "Process Email in Supabase",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        256,
        144
      ],
      "credentials": {
        "postgres": {
          "id": "JnDPpQ68oUq3yEkE",
          "name": "CRM"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    c.name as company_name, \n    d.product_name, \n    d.stage,\n    ps.name as stage_name,\n    ct.first_name,\n    ct.last_name,\n    ct.email,\n    ct.phone,\n    d.notes,\n    (SELECT ping_date FROM pings WHERE deal_id = d.id AND is_completed = FALSE ORDER BY ping_date ASC LIMIT 1) as next_ping_date\nFROM companies c \nJOIN deals d ON d.company_id = c.id \nLEFT JOIN contacts ct ON ct.id = d.contact_id\nLEFT JOIN pipeline_stages ps ON ps.id = d.stage\nWHERE c.id = '{{ $json.process_email.company_id }}' \nAND d.id = '{{ $json.process_email.deal_id }}'",
        "options": {}
      },
      "id": "b12ac772-fa47-4b06-b199-71471afeb183",
      "name": "Get Names from DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        416,
        144
      ],
      "credentials": {
        "postgres": {
          "id": "JnDPpQ68oUq3yEkE",
          "name": "CRM"
        }
      }
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $('Parse JSON from AI').item.json.emailId }}",
        "message": "=<html>\n<body style=\"font-family: Arial, sans-serif; font-size: 12px; line-height: 1.4; color: #333;\">\n\n<div style=\"margin-bottom: 10px;\">\n  <div style=\"font-weight: bold; font-size: 12px; margin-bottom: 4px;\">üë§ –ö–æ–º–ø–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç</div>\n  <div style=\"padding-left: 20px; font-size: 11px;\">\n    <div><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> {{ $('Get Names from DB').item.json.company_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</div>\n    <div><strong>–ò–º—è:</strong> {{ $('Get Names from DB').item.json.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }} {{ $('Get Names from DB').item.json.last_name || '' }}</div>\n    <div><strong>Email:</strong> {{ $('Get Names from DB').item.json.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</div>\n    <div><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {{ $('Get Names from DB').item.json.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</div>\n  </div>\n</div>\n\n<div style=\"margin-bottom: 10px;\">\n  <div style=\"font-weight: bold; font-size: 12px; margin-bottom: 4px;\">üì¶ –ü—Ä–æ–¥—É–∫—Ç</div>\n  <div style=\"padding-left: 20px; font-size: 11px;\">\n    <div><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {{ $('Get Names from DB').item.json.product_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</div>\n    <div><strong>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</strong> {{ $('Parse JSON from AI').item.json.output.product_description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</div>\n    <div><strong>–≠—Ç–∞–ø:</strong> {{ $('Get Names from DB').item.json.stage || $('Parse JSON from AI').item.json.output.stage }} ({{ $('Get Names from DB').item.json.stage_name }})</div>\n    {{ $('Parse JSON from AI').item.json.output.existing_deal ? '<div style=\"color: #0066cc;\"><strong>–°—Ç–∞—Ç—É—Å:</strong> –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</div>' : '<div style=\"color: #28a745;\"><strong>–°—Ç–∞—Ç—É—Å:</strong> –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</div>' }}\n  </div>\n</div>\n\n<div style=\"margin-bottom: 10px;\">\n  <div style=\"font-weight: bold; font-size: 12px;\"><span>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</span> <span style=\"font-weight: normal;\">{{ $('Get Names from DB').item.json.notes || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</span></div>\n</div>\n\n<div style=\"margin-bottom: 10px;\">\n  <div style=\"font-weight: bold; font-size: 12px; margin-bottom: 4px;\">üìÖ –î–∞—Ç—ã</div>\n  <div style=\"padding-left: 20px; font-size: 11px;\">\n    <div><strong>–û—Ç–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤:</strong> {{ $('Parse JSON from AI').item.json.output.sample_shipment_date || '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</div>\n    <div><strong>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</strong> {{ ($('Get Names from DB').item.json.next_ping_date || $('Process Email in Supabase').item.json.process_email.next_ping_date) ? new Date($('Get Names from DB').item.json.next_ping_date || $('Process Email in Supabase').item.json.process_email.next_ping_date).toDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ' }}</div>\n  </div>\n</div>\n\n<div style=\"font-size: 10px; color: #999; margin-top: 12px; padding-top: 8px; border-top: 1px solid #eee;\">\n  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π CRM\n</div>\n\n</body>\n</html>",
        "options": {
          "replyToSenderOnly": true
        }
      },
      "id": "70932189-313a-4c46-b33c-1e20aa25c826",
      "name": "Send Warning Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        592,
        144
      ],
      "webhookId": "1a545f11-e0c8-46d8-b8a9-aa129781d92e",
      "credentials": {
        "gmailOAuth2": {
          "id": "LzfcUmqtW5UjGJZf",
          "name": "LED Search Bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "eeae523a-e180-41ea-8b53-d1ef63fa236c",
              "leftValue": "={{ $json.isCloseCommand.toString() }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -560,
        64
      ],
      "id": "0f9c1c07-11f8-408f-8a3a-e87ca8b636d7",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        800,
        144
      ],
      "id": "ab264250-adb1-4140-ad2f-c6595baae2c9",
      "name": "Mark a message as read1",
      "webhookId": "42cbcc68-0770-4313-ad00-7fac164b3043",
      "credentials": {
        "gmailOAuth2": {
          "id": "LzfcUmqtW5UjGJZf",
          "name": "LED Search Bot"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Deal for Close": {
      "main": [
        [
          {
            "node": "Check Deal Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Deal Found": {
      "main": [
        [
          {
            "node": "Close Deal in DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Close Deal in DB": {
      "main": [
        [
          {
            "node": "Send Close Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing Deal": {
      "main": [
        [
          {
            "node": "Parse Email with AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email with AI": {
      "main": [
        [
          {
            "node": "Parse JSON from AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Parse Email with AI",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON from AI": {
      "main": [
        [
          {
            "node": "Process Email in Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Email in Supabase": {
      "main": [
        [
          {
            "node": "Get Names from DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Names from DB": {
      "main": [
        [
          {
            "node": "Send Warning Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Find Deal for Close",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Existing Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Warning Email": {
      "main": [
        [
          {
            "node": "Mark a message as read1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cf3a7513-8af0-4af0-a9c8-c5c9df4f0a76",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f393ef9df4111c047f6a8b275e44a69a74e0c35d9f0e460ae708ae127459bea9"
  },
  "id": "0VDpy7jx0ZEC29yD",
  "tags": []
}